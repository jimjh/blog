<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ampersand</title><link>http://blog.jimjh.com/</link><description></description><atom:link href="http://feeds.feedburner.com/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 30 Jul 2013 00:00:00 -0700</lastBuildDate><item><title>Thoughts from Reading Code - Foreman: Part 1</title><link>http://blog.jimjh.com/thoughts-from-reading-code-foreman-part-1.html</link><description>&lt;p&gt;I read a lot of open source code in my free time to make myself a better engineer. Here are some of my notes from reading foreman's &lt;a href="https://github.com/ddollar/foreman/blob/master/lib/foreman/cli.rb"&gt;cli.rb&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Code Style - Raising Exceptions with a Bang&lt;/h3&gt;
&lt;p&gt;You might occasionally encounter code that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;MyException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;oops&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_other_condition&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;meaningful error message&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;AnotherException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;oops&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;do_something_useful&lt;/span&gt;
  &lt;span class="n"&gt;do_some_other_useful_thing&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This seems perfectly normal - &lt;code&gt;start&lt;/code&gt; validates a few conditions (possibly derived from the context or environment), and decides if it is OK to continue with the operation. However, such validations get in the way of readability, and are often duplicated in other methods. To keep things SOLID and DRY, let's extract these out into private methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;check_some_condition&lt;/span&gt;
  &lt;span class="n"&gt;check_some_other_condition&lt;/span&gt;
  &lt;span class="n"&gt;do_something_useful&lt;/span&gt;
  &lt;span class="n"&gt;do_some_other_useful_thing&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Much better. The code is a lot easier to read, but the helper methods have masked their side effects. (In this case, exceptions are raised and output is printed when some conditions are not met.) This can be confusing as the code base grows and becomes more complicated. A new team member would take a longer time to go through the code and learn that the &lt;code&gt;check_*&lt;/code&gt; methods have potential side effects. To fix this, let's add a &lt;code&gt;!&lt;/code&gt; to the end of their names.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;check_some_condition!&lt;/span&gt;
  &lt;span class="n"&gt;check_some_other_condition!&lt;/span&gt;
  &lt;span class="n"&gt;do_something_useful&lt;/span&gt;
  &lt;span class="n"&gt;do_some_other_useful_thing&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this edit, the &lt;code&gt;start&lt;/code&gt; method's purpose and operations become immediately apparent.&lt;/p&gt;
&lt;h3&gt;Technique - Loading Configuration Files&lt;/h3&gt;
&lt;p&gt;Using Thor, one can easily create a command-line interface by defining options for tasks and accessing arguments via the &lt;code&gt;options&lt;/code&gt; hash. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;method_option&lt;/span&gt; &lt;span class="ss"&gt;:color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:boolean&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;# â€¦&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;adds a &lt;code&gt;start&lt;/code&gt; task that accepts a &lt;code&gt;--color&lt;/code&gt; option. It is often useful to allow the user to specify frequently used configuration options with a configuration file, such as &lt;code&gt;.rspec&lt;/code&gt; and &lt;code&gt;.yardopts&lt;/code&gt;. With Thor, the &lt;code&gt;options&lt;/code&gt; getter method provides a convenient place to merge options from the configuration file and from the command-line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;options&lt;/span&gt;
  &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;                                 &lt;span class="c1"&gt;# get original options hash&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists?&lt;/span&gt; &lt;span class="no"&gt;CONFIG_FILE&lt;/span&gt;
  &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="ss"&gt;YAML&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:load_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CONFIG_FILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;  &lt;span class="c1"&gt;# read from config file&lt;/span&gt;
  &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                         &lt;span class="c1"&gt;# merge&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that options provided on the command-line override the options given in the configuration file.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Tue, 30 Jul 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-07-30:thoughts-from-reading-code-foreman-part-1.html</guid><category>ruby</category><category>reading</category></item><item><title>Introducing Verbal, a Ruby Gem</title><link>http://blog.jimjh.com/introducing-verbal-a-ruby-gem.html</link><description>&lt;p&gt;I recently released &lt;a href="https://rubygems.org/gems/verbal"&gt;Verbal&lt;/a&gt;, a ruby gem that provides a fluent
DSL for creating regular expressions. It's a fork of jehna's popular
&lt;a href="https://github.com/jehna/VerbalExpressions"&gt;VerbalExpressions&lt;/a&gt; javascript library. Detailed documentation and code
examples are available at &lt;a href="http://rubydoc.info/gems/verbal/Verbal"&gt;rubydoc.info&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To create a regular expression that matches &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;, and &lt;code&gt;sftp&lt;/code&gt;,
one can use Verbal as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;verbal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Verbal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;://&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;otherwise&lt;/span&gt;
  &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ftp://&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;verbal&lt;/code&gt; just a regular expression.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;verbal&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Capturing groups may be specified using &lt;code&gt;capture&lt;/code&gt;. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;verbal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Verbal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;capture&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;anything&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="sr"&gt;/\sby\s/&lt;/span&gt;
  &lt;span class="n"&gt;capture&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;anything&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;verbal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;this is it by michael jackson&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; &amp;quot;this is it&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More examples can be found in the &lt;a href="https://github.com/jimjh/verbal/tree/master/spec"&gt;RSpec specs&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Sat, 27 Jul 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-07-27:introducing-verbal-a-ruby-gem.html</guid><category>ruby</category></item><item><title>Event Tracking with Google Analytics and LaunchRock</title><link>http://blog.jimjh.com/event-tracking-with-google-analytics-and-launchrock.html</link><description>&lt;p&gt;It's easy to create a landing page with LaunchRock, but getting meaningful analytics out of it is more difficult. For example, I still have not figured out a way to run a Google Analytics experiment on LaunchRock - using custom Javascript code in LaunchRock sometimes crashes the previewer, forcing me to reset my project.&lt;/p&gt;
&lt;h2&gt;Event Tracking&lt;/h2&gt;
&lt;p&gt;Anyway, back to event tracking. Open up the advanced editor, and use the following gist&lt;/p&gt;
&lt;script src="https://gist.github.com/jimjh/6039414.js"&gt;&lt;/script&gt;

&lt;p&gt;A few subtle points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The conventional way using &lt;code&gt;_gaq.push&lt;/code&gt; does not work because LaunchRock has its own &lt;code&gt;_gaq&lt;/code&gt; global variable that reports to their Analytics account instead of yours.&lt;/li&gt;
&lt;li&gt;This tracks the keypresses and button clicks, but does not actually know if the user really signed up. For example, the user could have given an invalid email address.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To test this, watch the &lt;em&gt;Realtime&lt;/em&gt; dashboard in your Analytics account while you create a few fake signups on your landing page. The events count should increase for the &lt;em&gt;Sign Up&lt;/em&gt; action of the &lt;em&gt;Users&lt;/em&gt; category.&lt;/p&gt;
&lt;p&gt;Once event tracking is in place, it is simple to create a goal for the event and link it to your Adwords campaign.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Fri, 19 Jul 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-07-19:event-tracking-with-google-analytics-and-launchrock.html</guid><category>javascript</category><category>analytics</category></item><item><title>Making Conditional Requests with Peter Murach's gem</title><link>http://blog.jimjh.com/making-conditional-requests-with-peter-murachs-gem.html</link><description>&lt;p&gt;GitHub imposes a rate limit on API requests, and encourages developers to use &lt;a href="http://developer.github.com/v3/#conditional-requests"&gt;conditional requests&lt;/a&gt;. Here is how to do that using Peter's popular &lt;a href="https://github.com/peter-murach/github"&gt;github api gem&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Method A - Faraday HTTP Cache w. ActiveSupport::Cache&lt;/h2&gt;
&lt;p&gt;This uses the &lt;a href="https://github.com/plataformatec/faraday-http-cache"&gt;faraday-http-cache gem&lt;/a&gt;, which takes care of expiration, etags, and response statuses.&lt;/p&gt;
&lt;script src="https://gist.github.com/jimjh/5961836.js"&gt;&lt;/script&gt;

&lt;h2&gt;Method B - Faraday HTTP Cache w. Moneta&lt;/h2&gt;
&lt;script src="https://gist.github.com/jimjh/5985170.js"&gt;&lt;/script&gt;

&lt;p&gt;More details are available in this &lt;a href="https://github.com/peter-murach/github/issues/112#issuecomment-20882465"&gt;issue&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Fri, 19 Jul 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-07-19:making-conditional-requests-with-peter-murachs-gem.html</guid><category>ruby</category><category>github api</category></item><item><title>jQuery Plugin - Box Lid Menu</title><link>http://blog.jimjh.com/jquery-plugin-box-lid-menu.html</link><description>&lt;p&gt;Smashing Magazine wrote &lt;a href="http://www.smashingmagazine.com/2013/07/11/innovative-navigation-designs/"&gt;a piece&lt;/a&gt; about &lt;a href="http://www.toybox.co.nz/"&gt;Toybox&lt;/a&gt;'s navigation menu today, describing the user experience as "peeking behind the page or the lid of a toybox". I really liked the design, took a shot at creating a &lt;a href="https://github.com/jimjh/box-lid/"&gt;jQuery plugin&lt;/a&gt; to replicate the effect. Here is a &lt;a href="http://jimjh.com/box-lid/"&gt;demo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most of the work is done in CSS3, and Javascript is only used to toggle the menu. When a user hovers her mouse over the menu bar, a script adds the &lt;code&gt;.box-lid-open&lt;/code&gt; class to the root element which triggers the CSS3 transitions.&lt;/p&gt;
&lt;p&gt;The skewing effect is achieved with &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;perspective-origin&lt;/code&gt;, and a &lt;code&gt;rotateY&lt;/code&gt; transformation. Credit goes to &lt;a href="http://bby.net.nz/"&gt;BBY&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Thu, 11 Jul 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-07-11:jquery-plugin-box-lid-menu.html</guid><category>javascript</category><category>jquery</category><category>css</category></item><item><title>A Short Tutorial on Custom Storyboard Segues</title><link>http://blog.jimjh.com/a-short-tutorial-on-custom-storyboard-segues.html</link><description>&lt;p&gt;&lt;em&gt;This is a repost from my old blog.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We will use the &lt;a href="http://www.cmumobileapps.com/2011/10/25/a-really-short-tutorial-on-storyboards/"&gt;last tutorial&lt;/a&gt; as a base to learn how to use custom segues.&lt;/p&gt;
&lt;p&gt;Suppose you don't want to &lt;em&gt;push&lt;/em&gt; between view controllers. In particular,
suppose you want first view controller to &lt;em&gt;flip&lt;/em&gt; to the second view controller.
To achieve this, you need a &lt;a href="https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIStoryboardSegue_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40010911"&gt;custom segue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create a new Objective-C class in the StoryboardDemo2 project with the name
&lt;code&gt;JHCustomSegue.m&lt;/code&gt; and let it be a subclass of &lt;code&gt;UIStoryboardSegue&lt;/code&gt;. Open up
&lt;code&gt;JHCustomSegue.m&lt;/code&gt; and add the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;UIViewController&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIViewController&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourceViewController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;UIViewController&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIViewController&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destinationViewController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;UIView&lt;/span&gt; &lt;span class="n"&gt;transitionWithView&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navigationController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;
                       &lt;span class="nl"&gt;options:&lt;/span&gt;&lt;span class="n"&gt;UIViewAnimationOptionTransitionFlipFromLeft&lt;/span&gt;
                    &lt;span class="nl"&gt;animations:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navigationController&lt;/span&gt; &lt;span class="n"&gt;pushViewController&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dst&lt;/span&gt; &lt;span class="n"&gt;animated&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                         &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="nl"&gt;completion:&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, open up the storyboard in XCode and click on the &lt;em&gt;segue&lt;/em&gt;. In other words,
click on the arrow pointing from the first view controller to the second view
controller.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Segue" src="images/2013/07/01/braces.png" /&gt;&lt;/p&gt;
&lt;p&gt;Hit &lt;code&gt;Alt+Cmd+0&lt;/code&gt; to open up the Utilities pane. Navigate to the Attributes
Inspector, choose &lt;code&gt;Custom&lt;/code&gt; for &lt;em&gt;Style&lt;/em&gt; and input &lt;code&gt;JHCustomSegue&lt;/code&gt; for &lt;em&gt;Segue Class&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Inspector" src="images/2013/07/01/inspector.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now, run your app in the simulator. You should be able to flip from the first
view controller to the second by tapping on the button at the top right-hand
corner.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-07-01:a-short-tutorial-on-custom-storyboard-segues.html</guid><category>ios</category><category>storyboards</category><category>segues</category></item><item><title>Compiling open source libraries with Android NDK: Part 2</title><link>http://blog.jimjh.com/compiling-open-source-libraries-with-android-ndk-part-2.html</link><description>&lt;p&gt;&lt;em&gt;This is a repost from my old blog.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For the second part of this series, we will deal with the compiling of open
source libraries that have several makefiles.&lt;/p&gt;
&lt;p&gt;Android NDK r5 added support for prebuilt libraries and also included
standalone toolchains that could be used to compile open-source libraries for
Android. These are very useful, and lets you tap into the pool of open-source
goodies that desktop developers enjoy. Essentially, we will be using the same
makefiles but with a cross-compiler.&lt;/p&gt;
&lt;p&gt;I am using Mac OS X, but the steps should also work on a Linux machine. If you
are a Windows user and know how to compile open-source libraries for Android on
a Windows machine, please leave a comment.&lt;/p&gt;
&lt;p&gt;Here, I will use the fftw3 library as an example. Get the library from the
&lt;a href="http://www.fftw.org/download.html"&gt;FFTW&lt;/a&gt; website.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use Eclipse to create a new Android project (letâ€™s name it &lt;code&gt;FourierTest&lt;/code&gt;) in
your workspace. This uses Android ADT to create the files required by
&lt;code&gt;ndk-build&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Unpack the fftw3 library in a directory parallel to the project directory
that you have just created.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inside the project directory, create a new &lt;code&gt;build.sh&lt;/code&gt; file with the following
contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c"&gt;# FourierTest/build.sh&lt;/span&gt;
&lt;span class="c"&gt;# Compiles fftw3 for Android&lt;/span&gt;
&lt;span class="c"&gt;# Make sure you have NDK_ROOT defined in .bashrc or .bash_profile&lt;/span&gt;

&lt;span class="nv"&gt;INSTALL_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;`pwd`/jni/fftw3&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SRC_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;`pwd`/../fftw-3.2.2&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$SRC_DIR&lt;/span&gt;

&lt;span class="nb"&gt;export&lt;/span&gt;
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$NDK_ROOT/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin/:$PATH&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;SYS_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$NDK_ROOT/platforms/android-8/arch-arm/&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arm-linux-androideabi-gcc --sysroot=$SYS_ROOT&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arm-linux-androideabi-ld&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;AR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arm-linux-androideabi-ar&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;RANLIB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arm-linux-androideabi-ranlib&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;STRIP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;arm-linux-androideabi-strip&amp;quot;&lt;/span&gt;

mkdir -p &lt;span class="nv"&gt;$INSTALL_DIR&lt;/span&gt;
./configure --host&lt;span class="o"&gt;=&lt;/span&gt;arm-eabi --build&lt;span class="o"&gt;=&lt;/span&gt;i386-apple-darwin10.8.0
--prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$INSTALL_DIR&lt;/span&gt; &lt;span class="nv"&gt;LIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-lc -lgcc&amp;quot;&lt;/span&gt;

make
make install

&lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, your directory structure should look like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;workspace&amp;gt;&lt;/span&gt;/
    FourierTest/
        AndroidManifest.xml
        build.sh
        ...
        src/
    fftw-3.2.2/
        configure
        ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;build.sh&lt;/code&gt; script given above tells the makefile to use the Android
cross-compiler instead of the system's compiler. In particular,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INSTALL_DIR&lt;/code&gt; tells make to install the compiled library in our project's jni directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; tells make to look for our tool chain in the NDK directory. Note that
you might have to change this value - explore your NDK directory to make sure
that the path exists&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SYS_ROOT&lt;/code&gt; tells make where to look for system libraries and header files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./configure --host=arm-eabi --build=i386-apple-darwin10.8.0&lt;/code&gt; tells make that
we are cross-compiling using a i386 architecture for an ARM architecture.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You most likely have to change the &lt;code&gt;PATH&lt;/code&gt; variable and the &lt;code&gt;--build&lt;/code&gt; parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open up Terminal and cd to your project directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;build.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The compiled library will be installed in &lt;code&gt;FourierTest/jni/fftw3&lt;/code&gt;. To use this
library, create the following &lt;code&gt;Android.mk&lt;/code&gt; file in &lt;code&gt;FourierTest/jni/fftw3&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# FourierTest/jni/fftw3/Android.mk&lt;/span&gt;
&lt;span class="nv"&gt;LOCAL_PATH&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;call my-dir&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;include $(CLEAR_VARS)&lt;/span&gt;

&lt;span class="nv"&gt;LOCAL_MODULE&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; fftw3

&lt;span class="nv"&gt;LOCAL_SRC_FILES&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; lib/libfftw3.a
&lt;span class="nv"&gt;LOCAL_EXPORT_C_INCLUDES&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;LOCAL_PATH&lt;span class="k"&gt;)&lt;/span&gt;/include

&lt;span class="cp"&gt;include $(PREBUILT_STATIC_LIBRARY)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-07-01:compiling-open-source-libraries-with-android-ndk-part-2.html</guid><category>android</category><category>ndk</category></item><item><title>Implementing a Singleton in iOS</title><link>http://blog.jimjh.com/implementing-a-singleton-in-ios.html</link><description>&lt;p&gt;&lt;em&gt;This is a repost from my old blog.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While I was at Appleâ€™s Cocoa Camp over summer, one of the speakers talked
rather passionately about the proper, thread-safe way to implement a singleton
in iOS, which I thought deserves more attention than it currently does on the
&lt;a href="https://encrypted.google.com/search?q=ios+singleton&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;aq=t"&gt;Web&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Common Way&lt;/h2&gt;
&lt;p&gt;According to the &lt;a href="http://www.johnwordsworth.com/2010/04/iphone-code-snippet-the-singleton-pattern/"&gt;first result&lt;/a&gt; on my Google search, a singleton should
be implemented as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;SingletonClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Get the shared instance and create it if necessary.&lt;/span&gt;
&lt;span class="k"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SingletonClass&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;sharedInstance&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt; &lt;span class="n"&gt;allocWithZone&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Although this method is quick and easy, it is not thread-safe and the object constructor might be called multiple times if several threads access the method concurrently. We need a way to lock the constructor and insist that it be executed at most once. This is where &lt;a href="http://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html#//apple_ref/c/func/dispatch_apply"&gt;Grand Central Dispatch&lt;/a&gt; comes in.&lt;/p&gt;
&lt;h2&gt;The ~Troublesome~ Thread-safe Way&lt;/h2&gt;
&lt;p&gt;GCD provides a neat API that makes concurrency programming in Cocoa convenient.
To implement a thread-safe singleton in Cocoa, all you need to do is the
following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;sharedInstance&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;NSLog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;sharedInstance called.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;dispatch_once_t&lt;/span&gt; &lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// lock&lt;/span&gt;
    &lt;span class="n"&gt;dispatch_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pred&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;             &lt;span class="c1"&gt;// this code is at most once&lt;/span&gt;
        &lt;span class="n"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;MyObject&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Letâ€™s look at the code in detail. First, notice that the first few lines are
the same: we have a static variable for our singleton, and we check whether it
is nil whenever we access &lt;code&gt;sharedInstance&lt;/code&gt;. If &lt;code&gt;singleton&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, allocate and
initialize it; otherwise, return it.&lt;/p&gt;
&lt;p&gt;The real difference is where we use the &lt;code&gt;dispatch_*&lt;/code&gt; types and functions. You may
think of &lt;code&gt;dispatch_once_t&lt;/code&gt; as a type of lock that &lt;code&gt;dispatch_once()&lt;/code&gt; uses to ensure
that the code is executed at most once. Here, we wrap up whatever code we wish
to be executed during the initialization of our singleton in a block. We then
pass the block as an argument to &lt;code&gt;dispatch_once&lt;/code&gt;. (Here's a pretty good tutorial
on &lt;a href="http://pragmaticstudio.com/blog/2010/7/28/ios4-blocks-1"&gt;blocks&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This implementation ensures that singleton is never executed more than once
even when multiple threads access &lt;code&gt;sharedInstance&lt;/code&gt; concurrently:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;dispatch_queue_t&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dispatch_get_global_queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DISPATCH_QUEUE_PRIORITY_DEFAULT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0U&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;dispatch_apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MyObject&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code results in the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.961&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;c03&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.961&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12603&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.961&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ef03&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.961&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12703&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.966&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;c03&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.966&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ef03&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.966&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;c03&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.966&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12703&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.966&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12603&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.969&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="n"&gt;c03&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2011&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;05.969&lt;/span&gt; &lt;span class="n"&gt;SingletonTest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1602&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ef03&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sharedInstance&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-07-01:implementing-a-singleton-in-ios.html</guid><category>cocoa</category><category>ios</category></item><item><title>Using Karma with Rails and Jenkins: Part 1</title><link>http://blog.jimjh.com/using-karma-with-rails-and-jenkins-part-1.html</link><description>&lt;p&gt;In a recent project, I experimented with &lt;a href="http://angularjs.org"&gt;AngularJS&lt;/a&gt; on
Rails, and managed to get &lt;a href="http://karma-runner.github.io/0.8/index.html"&gt;Karma&lt;/a&gt; to work nicely with Jenkins on
&lt;a href="http://cloudbees.com"&gt;CloudBees&lt;/a&gt;. This post documents the steps I took. (Part 2
will cover e2e tests, if I get that sorted out.)&lt;/p&gt;
&lt;p&gt;An example project is available on &lt;a href="https://github.com/jimjh/karma-rails"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;First, install karma locally with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;karma&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then install angular and jquery at the following locations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vendor/assets/javascripts/jquery-1.10.1.min.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vendor/assets/javascripts/angular/angular.min.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that these are necessary even if you are using a CDN for these libraries.
This ensures that your unit tests pass even without network access.&lt;/p&gt;
&lt;p&gt;Next, setup the spec directories,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;javascripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;angular&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;javascripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you expect to use mocks in your unit tests, install &lt;code&gt;angular-mocks.js&lt;/code&gt; at
&lt;code&gt;spec/javascripts/lib/angular/angular-mocks.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, create a karma configuration file with the following gist&lt;/p&gt;
&lt;script src="https://gist.github.com/jimjh/5904291.js"&gt;&lt;/script&gt;

&lt;p&gt;I am not perfectly satisfied with this solution, since it requires the developer to
manually synchronize &lt;code&gt;karma.conf.js&lt;/code&gt; with &lt;code&gt;application.js&lt;/code&gt;. Please let me know
in the comments if you figure out a better way.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Save your tests in &lt;code&gt;spec/javascripts/unit&lt;/code&gt;. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* spec/javascripts/unit/setup_spec.js */&lt;/span&gt;
&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setup&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;expects setup to be OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run tests using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;karma&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;karma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Continuous Integration&lt;/h2&gt;
&lt;p&gt;To use Karma with Jenkins, update &lt;code&gt;karma.conf.js&lt;/code&gt; to include&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;junitReporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outputFile:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;reports&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;karma&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nl"&gt;suite:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Write a script for jenkins at &lt;code&gt;script/ci&lt;/code&gt;:
&lt;script src="https://gist.github.com/jimjh/5904659.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Lastly, configure Jenkins to execute &lt;code&gt;script/ci&lt;/code&gt; and access the XML report at
&lt;code&gt;spec/reports/karma-unit.xml&lt;/code&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-07-01:using-karma-with-rails-and-jenkins-part-1.html</guid><category>rails</category><category>ruby</category><category>karma</category><category>jenkins</category></item><item><title>Playing with Stripe CTF</title><link>http://blog.jimjh.com/playing-with-stripe-ctf.html</link><description>&lt;p&gt;I was playing around with Stripe's &lt;a href="https://github.com/stripe-ctf/stripe-ctf-2.0"&gt;source code&lt;/a&gt; for last year's CTF,
and from what I could see online, most people solved Level 4 by using XSS in
the password field. But look at the following line in &lt;code&gt;srv.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^\w+$/&lt;/span&gt;
  &lt;span class="n"&gt;ie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Invalid username. Usernames must match /^\w+$/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:register&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Turns out there is a hole here as well due to the way Ruby treats the &lt;code&gt;^&lt;/code&gt; and
&lt;code&gt;$&lt;/code&gt; metacharacters. According to the &lt;a href="http://www.ruby-doc.org/core-1.9.2/Regexp.html#label-Anchors"&gt;documentation&lt;/a&gt;, the &lt;code&gt;^&lt;/code&gt; anchor
matches the beginning of a &lt;em&gt;line&lt;/em&gt;, instead of the entire string. Thus&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;match&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;script&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^\w$/&lt;/span&gt;     &lt;span class="c1"&gt;# doesn&amp;#39;t print anything&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;match&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^\w$/&lt;/span&gt;  &lt;span class="c1"&gt;#&amp;gt;&amp;gt; match&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This allows us to use the &lt;code&gt;username&lt;/code&gt; field as an attack vector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;eos&lt;/span&gt;
&lt;span class="sh"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="sh"&gt;$.post(&amp;#39;/transfer&amp;#39;, { to: &amp;#39;me&amp;#39;, amount: &amp;#39;10&amp;#39; });&lt;/span&gt;
&lt;span class="sh"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="sh"&gt;x&lt;/span&gt;
&lt;span class="no"&gt;eos&lt;/span&gt;
&lt;span class="ss"&gt;Net&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:HTTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post_form&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Trips me up every time. Use &lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt; to match the beginning and end of a
line in ruby.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.ioactive.com/2012/08/stripe-ctf-20-write-up.html#level4"&gt;IOActive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.spiderlabs.com/2012/08/stripe-ctf-walkthrough.html"&gt;SpiderLabs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Fri, 21 Jun 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-06-21:playing-with-stripe-ctf.html</guid><category>ruby</category><category>security</category></item><item><title>Experimenting with Git Hooks</title><link>http://blog.jimjh.com/experimenting-with-git-hooks.html</link><description>&lt;p&gt;I have been trying to follow a more disciplined approach to branching in my
projects to allow easier tracking and regression. For example, I learnt that
it's a good idea to prefix branch names with category tokens, such as
&lt;code&gt;feature/&lt;/code&gt;, &lt;code&gt;bug/&lt;/code&gt;, or &lt;code&gt;chore/&lt;/code&gt;. This allows us to use wildcards when listing
branches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$&amp;gt; git branch --list bug/*
$&amp;gt; git branch --list feature/*
feature/X49972617
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since I use Pivotal Tracker, I name my branches &lt;code&gt;&amp;lt;type&amp;gt;/X&amp;lt;story-id&amp;gt;&lt;/code&gt;, and then
use a simple hook to prepend all of my commit messages with the story ID.&lt;/p&gt;
&lt;script src="https://gist.github.com/jimjh/5798168.js"&gt;&lt;/script&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;$&amp;gt; git commit
[#49972617]
# Please enter the commit message for your changes. Lines starting
# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.
# On branch feature/X49972617
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Mon, 17 Jun 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-06-17:experimenting-with-git-hooks.html</guid><category>bash</category><category>git</category></item><item><title>Deployment is Scary - Part 2</title><link>http://blog.jimjh.com/deployment-is-scary-part-2.html</link><description>&lt;p&gt;The is the second installation of a series of posts about my deployment experiences with Enteract. Part 1 is available &lt;a href="http://blog.jimjh.com/deployment-is-scary-part-1.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I will focus on our use of &lt;a href="https://github.com/lostisland/faraday"&gt;Faraday&lt;/a&gt; and &lt;a href="http://upstart.ubuntu.com/"&gt;Upstart&lt;/a&gt; for some simple monitoring.&lt;/p&gt;
&lt;h2&gt;Faraday&lt;/h2&gt;
&lt;p&gt;We wanted a tool to monitor the web application and notify a member of the team should the web application be unreachable or defaced. The first requirement was relatively simple, and can be easily satisfied by using Amazon's Elastic Load Balancer with the &lt;a href="https://github.com/ianheggie/health_check"&gt;health check&lt;/a&gt; gem for Rails.&lt;/p&gt;
&lt;p&gt;The second requirement was slightly trickier, and I wrote a ruby script using Faraday that periodically&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;visits the sign in page,&lt;/li&gt;
&lt;li&gt;signs in,&lt;/li&gt;
&lt;li&gt;visits the home page,&lt;/li&gt;
&lt;li&gt;ensures that the names of all 24 entries exist on the page, and&lt;/li&gt;
&lt;li&gt;notifies the team, via text messages, should any of the assertions fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(On hindsight, it would have been much easier to use Capybara or JMeter for this purpose; I was using this as an excuse to learn how to use Faraday and Amazon's &lt;a href="http://aws.amazon.com/sns/"&gt;Simple Notification Service&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;I uploaded a &lt;a href="https://gist.github.com/jimjh/5646333"&gt;gist&lt;/a&gt; of the relevant script with the sensitive information redacted. The only tricky part was retrieving the CSRF token and preserving cookie information between requests.&lt;/p&gt;
&lt;h2&gt;Upstart&lt;/h2&gt;
&lt;p&gt;Next, I wanted to some reasonably reliable way to ensure that the monitoring process is alive - it wouldn't be a very useful monitoring tool if the process terminates prematurely. For this we used Upstart, an event-based init daemon that supervises the process and restarts it if it terminates.&lt;/p&gt;
&lt;p&gt;The configuration file that worked for me is as follows:&lt;/p&gt;
&lt;script src="https://gist.github.com/jimjh/5646473.js"&gt;&lt;/script&gt;

&lt;p&gt;There is probably an easier to set this up that uses a shorter command.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Fri, 24 May 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-05-24:deployment-is-scary-part-2.html</guid><category>ruby</category><category>rails</category></item><item><title>Predicting User Ratings on Yelp</title><link>http://blog.jimjh.com/predicting-user-ratings-on-yelp.html</link><description>&lt;p&gt;Several weeks ago, Yelp launched a &lt;a href="https://www.yelp.com/dataset_challenge/dataset"&gt;dataset challenge&lt;/a&gt; and released data on their users and businesses in Phoenix, AZ. The challenge shared some similarities with the Netflix Prize, and I was curious to see if the Alternating Least Squares algorithm that I used for my &lt;a href="http://blog.jimjh.com/static/downloads/2013/05/12/netflix.pdf"&gt;Netflix project&lt;/a&gt;  was versatile enough to be used for predicting business ratings on Yelp. The results were disappointing, but I shall document the process here for my own reference. All of the code used is available in a &lt;a href="https://github.com/jimjh/yelp-dataset-challenge"&gt;git repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Transforming the Data&lt;/h2&gt;
&lt;p&gt;The dataset arrived in a tarball that unpacks into a directory of JSON files. Each JSON file could be imported into MongoDB relatively easily with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mongoimport&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;db&lt;/span&gt; &lt;span class="nx"&gt;yelp&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="nx"&gt;reviews&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;drop&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, since Yelp mangled the primary keys before exporting the dataset, we need to change the primary keys to consecutive integers before we can import the data into MatLab as a sparse matrix. This can be done using the following script (also available from the git repository):&lt;/p&gt;
&lt;script src="https://gist.github.com/jimjh/5581460.js"&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code&gt;reviews&lt;/code&gt; collection may be exported to a CSV file that can be imported into MatLab.&lt;/p&gt;
&lt;h2&gt;Decomposing the Matrix&lt;/h2&gt;
&lt;p&gt;Using a &lt;em&gt;latent factor model&lt;/em&gt;, we assume that each business has a set of features, and each user has a certain preference for each feature. Then, the rating that a user gives to a business &lt;code&gt;r_ij&lt;/code&gt; is the dot product of the business's feature vector &lt;code&gt;b_i&lt;/code&gt; and the user's preferences vector &lt;code&gt;u_j&lt;/code&gt;. Putting everything together, we get &lt;code&gt;B Ã— U = R&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; is the features matrix, &lt;code&gt;U&lt;/code&gt; is the preferences matrix, and &lt;code&gt;R&lt;/code&gt; is the ratings matrix.&lt;/p&gt;
&lt;p&gt;The goal of the alternating least squares algorithm is thus to determine the matrices &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt;, and then use these for predicting unknown ratings. (The full explanation of the model and the algorithm are available in my &lt;a href="http://blog.jimjh.com/static/downloads/2013/05/12/netflix.pdf"&gt;project report&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Note that the model doesn't know exactly what these features are - it just guesses at a reasonable number of features.&lt;/p&gt;
&lt;h2&gt;Measuring the Results&lt;/h2&gt;
&lt;p&gt;The entire ratings matrix &lt;code&gt;R&lt;/code&gt; was too large for my Macbook to handle, and I took a random sample of 2000 users and 2000 businesses, which gave me about 1780 known ratings. The model has two parameters: the number of latent factors, and the regularization factor (lambda). I fixed the number of latent factors at 20, and then used 5-fold cross validation to determine the best value for lambda.&lt;/p&gt;
&lt;p&gt;The results were as follows:
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Algorithm&lt;/th&gt;
    &lt;th&gt;RMSE&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Plain ALS&lt;/td&gt;
    &lt;td&gt;1.4688&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ALS w. Bias&lt;/td&gt;
    &lt;td&gt;1.2365&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ALS w. Correction&lt;/td&gt;
    &lt;td&gt;1.5045&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;h2&gt;Possible Improvements&lt;/h2&gt;
&lt;p&gt;The results were disappointing, given that the standard deviation of my sample was only 1.2077. In other words, ALS did worse than simply predicting the mean rating all the time. Other than fixing possible bugs in my code (maybe I somehow permuted the data?), I could potentially modify the algorithm as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take into account known features and estimate user preferences for these.&lt;/li&gt;
&lt;li&gt;Use a clustering algorithm on the locations of the businesses, since a user's preference for a business is likely to be affected by its location.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will post updates here if I figure out what is going wrong.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Tue, 14 May 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-05-14:predicting-user-ratings-on-yelp.html</guid><category>machine learning</category><category>matlab</category><category>yelp</category></item><item><title>Deployment is Scary - Part 1</title><link>http://blog.jimjh.com/deployment-is-scary-part-1.html</link><description>&lt;p&gt;As part of a class project, I was given the opportunity to field a Rails application at &lt;a href="http://www.contrib.andrew.cmu.edu/~sc0v/"&gt;Spring Carnival&lt;/a&gt;, an annual event held by Carnegie Mellon University (official &lt;a href="http://www.hss.cmu.edu/pressreleases/pressreleases/IScarnivalcontest.html"&gt;press release&lt;/a&gt;.) Here, I will describe a subset of the risk mitigation strategies that we used to avoid hacking and maximize uptime.&lt;/p&gt;
&lt;p&gt;In the first part of this series, I will focus on our use of JMeter for some simple load testing.&lt;/p&gt;
&lt;h2&gt;Amazon Elastic Beanstalk&lt;/h2&gt;
&lt;p&gt;The application was deployed on Amazon's &lt;a href="http://aws.amazon.com/elasticbeanstalk/"&gt;Elastic Beanstalk&lt;/a&gt;, which has auto-scaling built in. However, this also meant that the application could have several web servers working off a single &lt;a href="http://aws.amazon.com/rds/"&gt;RDS&lt;/a&gt; server, which could cause some performance issues. Our goals for load testing were two-fold: first, we wished to ascertain the effectiveness of our auto-scaling policies; second, we wanted to ensure that the response times were reasonable even at twice the maximum expected load.&lt;/p&gt;
&lt;h2&gt;JMeter&lt;/h2&gt;
&lt;p&gt;JMeter was not the simplest tool for load testing, but developers (and ops engineers) seemed to agree that it was amongst the most powerful. The &lt;a href="http://jmeter.apache.org/usermanual/build-web-test-plan.html"&gt;user manual&lt;/a&gt; provides detailed instructions for building a web test plan. In addition to a thread group and a config element for HTTP request defaults, we also added a HTTP cookie manager for maintaining sessions. The following screenshot captures the hierarchy of our setup.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="images/2013/05/12/jmeter-tree.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Extract CSRF Token&lt;/h3&gt;
&lt;p&gt;Before our test user could login, it had to find the CSRF token on the page and submit that along with its credentials for Rails to accept the request. To do this, we added a HTTP Request to our thread group (or, more accurately, a request &lt;em&gt;sampler&lt;/em&gt;). This sampler issues GET requests to &lt;code&gt;/users/sign_in&lt;/code&gt;, and, using a Regular Expression Extractor (available under &lt;em&gt;Post Processors&lt;/em&gt;), searches for the CSRF token with the following regex&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;authenticity_token&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(.*?)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The matched token is stored in the &lt;code&gt;LOGIN_AUTH_TOKEN&lt;/code&gt; variable for JMeter to use in subsequent requests.&lt;/p&gt;
&lt;h3&gt;Authenticate User&lt;/h3&gt;
&lt;p&gt;Next, we added another request sampler that issues POST requests to &lt;code&gt;/users/sign_in&lt;/code&gt; with the user's email, password, and the CSRF token from the previous step. (I forgot to encode the CSRF token and spent a great amount of time wondering why Rails occasionally rejected requests from this sampler.) The following screenshot showed our configuration.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="images/2013/05/12/jmeter-login.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Do Something&lt;/h3&gt;
&lt;p&gt;Finally, we added request samplers to perform some action on the application. In my case, I was mainly worried about I/O performance, and thus added actions that would force read/writes to the database. Note that if some of these actions require CSRF tokens, in which case one could use the CSRF extraction described above and a HTTP Header Manager to include the &lt;code&gt;X-CSRF&lt;/code&gt; header in the request. We also found it useful to include a response assertion to verify the status code of the response.&lt;/p&gt;
&lt;h3&gt;Measure Response Times&lt;/h3&gt;
&lt;p&gt;After some tinkering (such as using &lt;a href="http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations"&gt;eager loading&lt;/a&gt; to reduce the number of database calls), we managed to improve the application's performance to (what I thought was) a reasonable level.&lt;/p&gt;
&lt;p&gt;The entire JMX file is available &lt;a href="downloads/2013/05/12/enteract.jmx"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="images/2013/05/12/load-test.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Sun, 12 May 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-05-12:deployment-is-scary-part-1.html</guid><category>ruby</category><category>rails</category></item><item><title>Numbering the Last Line of Align* in LaTex</title><link>http://blog.jimjh.com/numbering-the-last-line-of-align-in-latex.html</link><description>&lt;p&gt;On numerous occasions, I find myself trying to number the last line (and &lt;em&gt;only&lt;/em&gt;
the last line!) of a long series of derivations in an &lt;code&gt;align*&lt;/code&gt; environment. I
usually switch to the &lt;code&gt;align&lt;/code&gt; environment and use &lt;code&gt;\notag&lt;/code&gt; to turn off the
number on each line except the last.&lt;/p&gt;
&lt;p&gt;There is a better solution, offered by egreg on &lt;a href="http://tex.stackexchange.com/questions/66759/make-align-number-the-last-equation"&gt;StackOverflow&lt;/a&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/anonymous/5276841.js"&gt;&lt;/script&gt;

&lt;p&gt;By using &lt;code&gt;equation&lt;/code&gt; and &lt;code&gt;aligned&lt;/code&gt;, we get an environment similar to &lt;code&gt;align*&lt;/code&gt;
that only numbers the last line.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Sat, 30 Mar 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-03-30:numbering-the-last-line-of-align-in-latex.html</guid><category>latex</category></item><item><title>Some Custom Matchers for RSpec with Shoulda</title><link>http://blog.jimjh.com/some-custom-matchers-for-rspec-with-shoulda.html</link><description>&lt;h3&gt;It should have a valid factory&lt;/h3&gt;
&lt;p&gt;I use &lt;a href="https://github.com/thoughtbot/factory_girl"&gt;Factory Girl&lt;/a&gt; in my tests, and I have found it useful to
check that I have valid factories for each model in my tests/specs. Here is a
matcher you can use for that purpose.&lt;/p&gt;
&lt;script src="https://gist.github.com/jimjh/5263666.js"&gt;&lt;/script&gt;

&lt;p&gt;Add this file to &lt;code&gt;spec/support&lt;/code&gt;. Then in your specs, just use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;have_a_valid_factory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;It should validate the existence of X&lt;/h3&gt;
&lt;p&gt;In some of my models, I have validations that ensure existence of a given
foreign key &lt;em&gt;i.e.&lt;/em&gt; the foreign key must refer to an existing record. You can
use the &lt;a href="https://github.com/perfectline/validates_existence"&gt;validates_existence&lt;/a&gt; gem, or write your own. Here
is a matcher for &lt;code&gt;validates_existence_of&lt;/code&gt;.&lt;/p&gt;
&lt;script src="https://gist.github.com/jimjh/5230194.js"&gt;&lt;/script&gt;

&lt;p&gt;In your specs, just use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Membership&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;validate_existence_of&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Thu, 28 Mar 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-03-28:some-custom-matchers-for-rspec-with-shoulda.html</guid><category>ruby</category><category>rspec</category><category>shoulda</category><category>factory_girl</category></item><item><title>Deploying a Thrift Server with Capistrano</title><link>http://blog.jimjh.com/deploying-a-thrift-server-with-capistrano.html</link><description>&lt;p&gt;At the time of writing, I couldn't find an existing &lt;a href="http://capistranorb.com/"&gt;Capistrano&lt;/a&gt;
recipe for deploying &lt;a href="http://thrift.apache.org/"&gt;thrift&lt;/a&gt; servers. So &lt;a href="https://github.com/jimjh/capistrano-thrift-example"&gt;here&lt;/a&gt; is an example
that works with ubuntu.&lt;/p&gt;
&lt;p&gt;Before you use the recipe, don't forget to update the configuration options to
match your server setup. At the very least, you will need to update the
following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:application&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:repository&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:super_user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:app_port&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;role :app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the recipe assumes a system-wide rvm install. &lt;code&gt;:user&lt;/code&gt; does not need
to be a sudoer, but &lt;code&gt;:super_user&lt;/code&gt; must be. This is arranged as such for
security purposes, since the server process will be owned by &lt;code&gt;:user&lt;/code&gt;. The super
user is used to create the Upstart job.&lt;/p&gt;
&lt;p&gt;Finally, execute&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cap deploy:setup
&lt;span class="nv"&gt;$ &lt;/span&gt;cap deploy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to setup and deploy your thrift server.&lt;/p&gt;
&lt;h2&gt;Upstart&lt;/h2&gt;
&lt;p&gt;During &lt;code&gt;cap deploy:setup&lt;/code&gt;, the recipe creates an Upstart job using the template
at &lt;a href="https://github.com/jimjh/capistrano-thrift-example/blob/master/config/thrift_app.conf"&gt;config/thrift_app.conf&lt;/a&gt;. This allows Upstart to launch and monitor your
thrift server. You can use other monitoring tools if you like. Just update the
&lt;code&gt;deploy:setup&lt;/code&gt; task appropriately.&lt;/p&gt;
&lt;h2&gt;Thor&lt;/h2&gt;
&lt;p&gt;To play with the Thrift server, launch it as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;bin/my-application server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then create a new client as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;bin/my-application client
&amp;gt; ping
pong!
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Wed, 20 Mar 2013 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2013-03-20:deploying-a-thrift-server-with-capistrano.html</guid><category>ruby</category><category>thrift</category><category>capistrano</category></item><item><title>Monopoly Heat Map</title><link>http://blog.jimjh.com/monopoly-heat-map.html</link><description>&lt;p&gt;I am working on a Monopoly manual for my professional writing class, and did a
heat map showing the relative probabilities of landing on each square of the
Monopoly board. It's done using canvas on HTML5.&lt;/p&gt;
&lt;p&gt;Here is a preview:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Monopoly Heat Map" src="images/2012/11/heatmap.png" title="Monopoly Heat Map" /&gt;&lt;/p&gt;
&lt;p&gt;Check it out &lt;a href="http://jimjh.com/monopoly-heatmap/"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Mon, 19 Nov 2012 00:00:00 -0800</pubDate><guid>tag:blog.jimjh.com,2012-11-19:monopoly-heat-map.html</guid><category>monopoly</category><category>heatmap</category><category>visualization</category></item><item><title>Passwordless Kerberized SSH for CMU's UNIX machines</title><link>http://blog.jimjh.com/passwordless-kerberized-ssh-for-cmus-unix-machines.html</link><description>&lt;p&gt;If you use SSH frequently to access &lt;code&gt;unix.andrew.cmu.edu&lt;/code&gt;, you must have tried at some point to set up &lt;a href="http://osxdaily.com/2012/05/25/how-to-set-up-a-password-less-ssh-login/"&gt;passwordless login&lt;/a&gt; using public/private keys. That didn't work for me, and when I did &lt;code&gt;ssh -vv unix.andrew.cmu.edu&lt;/code&gt;, it always failed at&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;debug2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;did&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;packet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then asked me for a password. After &lt;em&gt;much&lt;/em&gt; trial and error (including locking myself out of my account), I finally uncovered the secret.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: this tutorial is for Mac OS X only, although you might be able to
configure a similar setup on Linux.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Setup A Few Things&lt;/h2&gt;
&lt;p&gt;First, let's get a basic things out of the way. These are optional, but I will assume that you have these for the rest of the tutorial.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download and install Mac OS X Kerberos Extras from &lt;a href="http://web.mit.edu/macdev/www/osx-kerberos-extras.html"&gt;MIT&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Setup a default SSH user for the &lt;code&gt;unix.andrew.cmu.edu&lt;/code&gt; domain, by ensuring that there is a file at &lt;code&gt;~/.ssh/config&lt;/code&gt; that contains the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;Host&lt;/span&gt; unix.andrew.cmu.edu
    &lt;span class="nb"&gt;User&lt;/span&gt; your_andrew_ID
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configure Kerberos&lt;/h2&gt;
&lt;p&gt;Instead of using public/private keys for passwordless login, we will use kerberos tickets.&lt;/p&gt;
&lt;p&gt;First, copy the configuration file from the UNIX machines to your local machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; scp unix.andrew.cmu.edu:/etc/krb5.conf krb5.conf
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; sudo mv krb5.conf /etc/krb5.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, try to obtain a kerberos ticket for your andrew account, then try to login.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; kinit my_andrew_id@ANDREW.CMU.EDU
&lt;span class="c"&gt;# enter your password when prompted ...&lt;/span&gt;
&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; ssh unix.andrew.cmu.edu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last step should succeed without asking you for your password.&lt;/p&gt;
&lt;h2&gt;Renew Daily&lt;/h2&gt;
&lt;p&gt;Once you have completed the above configuration, at the start of each day, issue the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; kinit my_andrew_id@ANDREW.CMU.EDU
&lt;span class="c"&gt;# enter your password when prompted ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you should be able to ssh into &lt;code&gt;unix.andrew.cmu.edu&lt;/code&gt; for the rest of the day without a password. The tickets expire after 11 hours.&lt;/p&gt;
&lt;h2&gt;Store Password in Keychain Access&lt;/h2&gt;
&lt;p&gt;If you like, you can keep your password in keychain access by using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; security add-generic-password -a &lt;span class="s2"&gt;&amp;quot;my_andrew_id&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -s &lt;span class="s2"&gt;&amp;quot;ANDREW.CMU.EDU&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -w &lt;span class="s2"&gt;&amp;quot;mypasswd&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -c &lt;span class="s2"&gt;&amp;quot;aapl&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -T &lt;span class="s2"&gt;&amp;quot;/usr/bin/kinit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entering passwords in plain text on the command line may scare some people. You can leave that out and enter it manually in the KeyChain Access app.&lt;/p&gt;
&lt;p&gt;Once that is done, &lt;code&gt;kinit&lt;/code&gt; will get your password from KeyChain Access automatically.&lt;/p&gt;
&lt;h2&gt;Done!&lt;/h2&gt;
&lt;p&gt;Now you can &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; like a pro without that pesky password prompt.&lt;/p&gt;
&lt;h2&gt;Advanced: Auto-Renewal&lt;/h2&gt;
&lt;p&gt;There might be a way for you to &lt;a href="http://www.linuxquestions.org/questions/linux-software-2/automatic-renewal-of-kerberos-tickets-792305/"&gt;automatically renew&lt;/a&gt; kerberos tickets when they expire. It's not too annoying for me to enter my password once a day, so I will leave that to you.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Thu, 08 Nov 2012 00:00:00 -0800</pubDate><guid>tag:blog.jimjh.com,2012-11-08:passwordless-kerberized-ssh-for-cmus-unix-machines.html</guid><category>ssh</category><category>kerberos</category><category>unix</category><category>cmu</category></item><item><title>Backbone, Faye, and Reaction</title><link>http://blog.jimjh.com/backbone-faye-and-reaction.html</link><description>&lt;p&gt;I was jealous of what MeteorJS did for NodeJS developers, and decided to steal
some of their ideas for Rails. The result is the &lt;a href="https://github.com/jimjh/reaction"&gt;reaction gem&lt;/a&gt;, and
a demo app can be downloaded from &lt;a href="https://github.com/jimjh/reaction-todos"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Transparent Synchronization&lt;/h2&gt;
&lt;p&gt;Using Reaction, you write your app like a usual Backbone app. However, instead
of using &lt;code&gt;Backbone.Collection&lt;/code&gt;, use &lt;code&gt;Reaction.Collection&lt;/code&gt; to create a
synchronized collection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Reaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;controller_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;todos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;todo&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The collection provides a custom &lt;code&gt;sync&lt;/code&gt; function that routes changes to the
conventional CRUD endpoints of the Rails application. For example, when you
invoke &lt;code&gt;collection.create({...}, {wait:true})&lt;/code&gt;, it makes a POST request to the
Rails app.&lt;/p&gt;
&lt;p&gt;When updates are &lt;em&gt;pushed&lt;/em&gt; from the Rails server to the client, the collection is
updated and &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, or &lt;code&gt;change&lt;/code&gt; events are fired. For example, a view
may react to an &lt;code&gt;add&lt;/code&gt; event as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Local HTML5 Storage&lt;/h2&gt;
&lt;p&gt;Objects in the collection are cached in the local HTML5 storage.  If the client
is online, this helps to reduce the initial time required to load the
interface; if the client is offline, this allows the collection to be
re-created from the cache, showing the user a decent (but outdated) interface.&lt;/p&gt;
&lt;h2&gt;Separate App Server and Push Server&lt;/h2&gt;
&lt;p&gt;For scaling purposes, the app server can be separated from the push server.
This also allows multiple app servers to share the same push server. When these
servers are started, a shared secret must be provided. This secret will be used
to sign messages sent from the app servers to the push server.&lt;/p&gt;
&lt;p&gt;If you wish to learn more, head to the &lt;a href="https://github.com/jimjh/reaction/blob/master/QUICKSTART.md"&gt;quickstart&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Fri, 02 Nov 2012 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2012-11-02:backbone-faye-and-reaction.html</guid><category>ruby</category><category>rails</category><category>javascript</category><category>mvc</category></item><item><title>Hello world</title><link>http://blog.jimjh.com/hello-world.html</link><description>&lt;p&gt;This is my first blog post using Pelican.&lt;/p&gt;
&lt;p&gt;I first tried using Wordpress, then migrated to Tumblr. Hope this works better!
Old posts are still accessible at &lt;a href="http://jim-lim.tumblr.com"&gt;tumblr&lt;/a&gt;. This one is starting anew.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Lim</dc:creator><pubDate>Wed, 24 Oct 2012 00:00:00 -0700</pubDate><guid>tag:blog.jimjh.com,2012-10-24:hello-world.html</guid><category>blogging</category><category>test</category></item></channel></rss>